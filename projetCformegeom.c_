#include <stdio.h>
#include <SDL.h>
#include <math.h>
SDL_Window *win;
SDL_Renderer* renderer;


void draw_circle(int x, int y, int r, int br, int bg, int bb, int fr, int fg, int fb )
{
    SDL_Init(SDL_INIT_VIDEO);

    SDL_Window *window = SDL_CreateWindow("Cercle SDL", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, 1000, 1000, 0);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderClear(renderer);

    double pi=M_PI;
    
    for (int angle = 0; angle < 360; angle++)
    {
      double  newX = x + cos(angle*pi/180)*r;
      double  newY = y + sin(angle*pi/180)*r;
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, newX, newY);
      SDL_RenderPresent(renderer);
    }

    for (int r2=0; r2<r; r2++)
      {
	for (int angle = 0; angle < 360; angle++)
	  {
	    double  newX = x + cos(angle*pi/180)*r2;
	    double  newY = y + sin(angle*pi/180)*r2;
	    SDL_SetRenderDrawColor(renderer, fr, fg, fb, 255);
	    SDL_RenderDrawPoint(renderer, newX, newY);
	    SDL_RenderPresent(renderer);
	  }
      }
    

    SDL_Delay(5000);
    SDL_DestroyWindow(window);
    SDL_Quit();

}

void draw_rect(int x, int y, int w, int h, int br, int bg, int bb, int fr, int fg, int fb)
{
    SDL_Init(SDL_INIT_VIDEO);

    SDL_Window *window = SDL_CreateWindow("Rectange SDL", SDL_WINDOWPOS_UNDEFINED,    SDL_WINDOWPOS_UNDEFINED, 1000, 1000, 0);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderClear(renderer);
    
    for(int i=0; i<w; i++)
    {
      int xB=x+i;
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, x, xB);
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, x+h, xB);
      SDL_RenderPresent(renderer);
    }
    for(int j=0; j<h; j++)
    {
      int yB=y+j;
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, yB, y);
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, yB, y+w);
      SDL_RenderPresent(renderer);
    }
	
	
	
    for(int i=1; i<w; i++)
    {
      for(int j=1; j<h; j++)
      {
	int newX=x+i;
	int newY=y+j;
	SDL_SetRenderDrawColor(renderer, fr, fg, fb, 255);
        SDL_RenderDrawPoint(renderer, newX, newY);
        SDL_RenderPresent(renderer);
      }
    }
	
    SDL_Delay(5000);
    SDL_DestroyWindow(window);
    SDL_Quit();   
        
}

void draw_ellipse(int x, int y, int w, int h, int br, int bg, int bb, int fr, int fg, int fb)
{
    SDL_Init(SDL_INIT_VIDEO);

    SDL_Window *window = SDL_CreateWindow("Ellipse SDL", SDL_WINDOWPOS_UNDEFINED,    SDL_WINDOWPOS_UNDEFINED, 1000, 1000, 0);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderClear(renderer);
    double pi=M_PI;

    for(int angle=0; angle<360; angle++)
    {
      double newX=x +w*cos(angle*pi/180);
      double newY=y +h*sin(angle*pi/180);
      SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
      SDL_RenderDrawPoint(renderer, newX, newY);
      SDL_RenderPresent(renderer);
    }

    for(int angle =0; angle<360; angle++)
    {
      for(int i =0; i<w; i++)
      {
	for(int j=0; j<h; j++)
	{
	  double newX=x +i*cos(angle*pi/180);
	  double newY=y +j*sin(angle*pi/180);
	  SDL_SetRenderDrawColor(renderer, fr, fg, fb, 255);
	  SDL_RenderDrawPoint(renderer, newX, newY);
	  SDL_RenderPresent(renderer);
	}
      }
    }
	 
    SDL_Delay(5000);
    SDL_DestroyWindow(window);
    SDL_Quit();
}


void draw_triangle(double x1, double y1, double x2, double y2, double x3, double y3,int  br, int bg, int bb, int fr, int fg, int fb)
{
  SDL_Init(SDL_INIT_VIDEO);

  SDL_Window *window = SDL_CreateWindow("Triangle SDL", SDL_WINDOWPOS_UNDEFINED,    SDL_WINDOWPOS_UNDEFINED, 1000, 1000, 0);
  SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
  SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
  SDL_RenderClear(renderer);


  
  double x=x1;

  while(((y2-y1)/(x2-x1))*x+y2-(y2-y1)/(x2-x1)*x2!=y2)
  {
    double newX=x;
    double newY=(y2-y1)/(x2-x1)*x+y2-(y2-y1)/(x2-x1)*x2;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x1<x2)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x2;
  while(((y3-y2)/(x3-x2))*x+y3-(y3-y2)/(x3-x2)*x3!=y3)
  {
    double newX=x;
    double newY=(y3-y2)/(x3-x2)*x+y3-(y3-y2)/(x3-x2)*x3;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x2<x3)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x3;
 
   while(((y1-y3)/(x1-x3))*x+y1-(y1-y3)/(x1-x3)*x1!=y1)
  {
    double newX=x;
    double newY=(y1-y3)/(x1-x3)*x+y1-(y1-y3)/(x1-x3)*x1;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x3<x1)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  SDL_Delay(5000);
  SDL_DestroyWindow(window);
  SDL_Quit();
}


void draw_quadrilatere(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, int br, int bg, int bb, int fr, int fg, int fb)
{
  SDL_Init(SDL_INIT_VIDEO);

  SDL_Window *window = SDL_CreateWindow("Quadrilatere SDL", SDL_WINDOWPOS_UNDEFINED,    SDL_WINDOWPOS_UNDEFINED, 1000, 1000, 0);
  SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
  SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
  SDL_RenderClear(renderer);

  /*draw_triangle(x1, y1, x2, y2, x3, y3, br, bg, bb, fr, fg ,fb);
    draw_triangle(x1, y1, x3, y3, x4, y4, br, bg, bb, fr, fg, fb);*/


  double x=x1;

  while(((y2-y1)/(x2-x1))*x+y2-(y2-y1)/(x2-x1)*x2!=y2)
  {
    double newX=x;
    double newY=(y2-y1)/(x2-x1)*x+y2-(y2-y1)/(x2-x1)*x2;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x1<x2)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x2;
  while(((y3-y2)/(x3-x2))*x+y3-(y3-y2)/(x3-x2)*x3!=y3)
  {
    double newX=x;
    double newY=(y3-y2)/(x3-x2)*x+y3-(y3-y2)/(x3-x2)*x3;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x2<x3)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x3;
 
   while(((y1-y3)/(x1-x3))*x+y1-(y1-y3)/(x1-x3)*x1!=y1)
  {
    double newX=x;
    double newY=(y1-y3)/(x1-x3)*x+y1-(y1-y3)/(x1-x3)*x1;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x3<x1)
    {
      x++;
    }
    else
    {
      x--;
    }
  }

   x2=x3,y2=y3,x3=x4,y3=y4;
  x=x1;

  while(((y3-y1)/(x3-x1))*x+y3-(y3-y1)/(x3-x1)*x3!=y3)
  {
    double newX=x;
    double newY=(y3-y1)/(x3-x1)*x+y3-(y3-y1)/(x3-x1)*x3;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x1<x3)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x2;
  while(((y3-y2)/(x3-x2))*x+y3-(y3-y2)/(x3-x2)*x3!=y3)
  {
    double newX=x;
    double newY=(y3-y2)/(x3-x2)*x+y3-(y3-y2)/(x3-x2)*x3;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x2<x3)
    {
      x++;
    }
    else
    {
      x--;
    }
  }
  x=x3;
 
 while(((y1-y3)/(x1-x3))*x+y1-(y1-y3)/(x1-x3)*x1!=y1)
  {
    double newX=x;
    double newY=(y1-y3)/(x1-x3)*x+y1-(y1-y3)/(x1-x3)*x1;
    SDL_SetRenderDrawColor(renderer, br, bg, bb, 255);
    SDL_RenderDrawPoint(renderer, newX, newY);
    SDL_RenderPresent(renderer);
    if(x3<x1)
    {
      x++;
    }
    else
    {
      x--;
    }
  }

  SDL_Delay(5000);
  SDL_DestroyWindow(window);
  SDL_Quit();
}
  
  
/* les paramètres argc et argv sont OBLIGATOIRES ! */
int main(int argc, char *argv[])
{
  SDL_Event events;
  int x;
  int y;
  int w;
  int h;
  int running;
  /* SDL doit être initialisé */
  if (SDL_Init(SDL_INIT_VIDEO) < 0)
  {
      SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,"error : %s\n", SDL_GetError());
      return -1;
  }
  
  draw_circle(500, 500, 50);
  draw_rect(250, 250, 250, 250, 0,0,0, 255, 0, 255);
  draw_ellipse(250,250, 100, 50, 255,0,0, 0, 0, 0);
  draw_triangle(250, 700, 500, 900, 900, 400, 255, 0, 0, 0, 0, 0);
  draw_quadrilatere(250,500,700,300,600,700, 200, 600, 255, 0, 0, 0, 0, 0);
  

  return 0;
}
